import edu.wpi.first.gradlerio.GradleRIOPlugin
import groovy.json.JsonSlurper

plugins {
	id "java"
	id 'org.jetbrains.kotlin.jvm'
	alias(libs.plugins.gradleRIO)
	alias(libs.plugins.spotless)
	alias(libs.plugins.dokka)
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
	targets {
		roborio(getTargetTypeClass('RoboRIO')) {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = project.frc.getTeamNumber()
			debug = project.frc.getDebugOrDefault(false)

			artifacts {
				// First part is artifact name, 2nd is artifact type
				// getTargetTypeClass is a shortcut to get the class type using a string
				frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
					//					jvmArgs.add("-XX:+HeapDumpOnOutOfMemoryError")
					//					jvmArgs.add("-XX:HeapDumpPath=/u/frc-usercode.hprof")
				}

				// Static files artifact
				frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
					files = project.fileTree('src/main/deploy')
					directory = '/home/lvuser/deploy'
					deleteOldFiles = false // Change to true to delete files on roboRIO that no
					// longer exist in deploy directory of this project
				}
			}
		}
	}
}



def deployArtifact = deploy.targets.roborio.artifacts.frcJava

tasks.register('replayWatch', JavaExec) {
	mainClass = "org.littletonrobotics.junction.ReplayWatch"
	classpath = sourceSets.main.runtimeClasspath
}

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
	annotationProcessor wpi.java.deps.wpilibAnnotations()
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation libs.junit.jupiter
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation libs.malefix

	dokkaHtmlPlugin(libs.dokka.java)
	def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
	annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
	useJUnitPlatform()
	systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from sourceSets.main.allSource
	manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile).configureEach {
	options.compilerArgs.add '-XDstringConcat=inline'
}

repositories {
	mavenCentral()
	maven { url = uri("https://frcmaven.wpi.edu/artifactory/release/") }
	maven { url = uri("https://plugins.gradle.org/m2/") }
	maven { url = uri("https://maven.ctr-electronics.com/release/") }
	maven { url = uri("https://maven.revrobotics.com/") }
	maven { url = uri("https://maven.photonvision.org/repository/internal") }
	maven { url = uri("https://frcmaven.wpi.edu/artifactory/littletonrobotics-mvn-release/") }
	maven { url = uri("https://lib.choreo.autos/dep") }
	maven { url = uri("https://shenzhen-robotics-alliance.github.io/maple-sim/vendordep/repos/releases") }
	maven { url = uri("https://3015rangerrobotics.github.io/pathplannerlib/repo") }
}

kotlin {
	jvmToolchain(17)
}

spotless {
	kotlin {
		ktlint()
	}
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat().reflowLongStrings()
		formatAnnotations()
	}
	groovyGradle {
		greclipse()
	}
}

tasks.named('build') {
	dependsOn 'spotlessApply'
}

dokka {
	dokkaPublications.html {
		outputDirectory.set(layout.buildDirectory.dir("dokka").get())
		suppressInheritedMembers = true
	}
}
